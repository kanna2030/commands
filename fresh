Commands we learned
git init to initialize
git status to check and found that it is in untracked level
git add commands.txt  - to bring it to the staged level
git commit -m "add commands" - to commit the file
git log - to check the HASH id
git restore - to restore the deleted file
git rm --cached - to bring back the file from staged to the untracked level
git log --oneline - to bring the hash ids only
git log --oneline --pretty - to bring the small hash ids
git config --global user.name "craoit"  - so instead of seeing a bigger name in author you will have your own username of git
git config --global user.email "craoit2095@gmail.com" - same goes with email

new branch command(dev): I have added the same commands when i was in dev branch but currently i am in master branch and just to differentiate i have mentioned this statement :

git checkout -b dev
git checkout -b dev - to change the branch
now run git status to chck the branch will show as HEad- dev, master

edit the commands.tt and save it
you will see the branch as dev when you run the git log after committing the file
now change the branch back to the master by running - git checkout master
when you do git log you will not see the file committed at the time of dev branch
that means the different branch has different actions so whatever changes you will make in dev branch it will not affect the master branch


new branch command(dev): I have added the same commands when i was in dev branch but currently i am in master branch and just to differentiate i have mentioned this statement :

git checkout -b dev
git checkout master
git branch
git clone <url>
git remote -v - to check the origin of the repository fetch and push

new line to eecute pull, fetch, push command to sync the repository from guthub to local
git pull origin main

a. git remote set-url --add origin https:<token>@<url from running git remote -v>
b. git push origin main

also run > git remote set-url --delete <url>

also delete the origin url for fetch and push that was originally generated by running git remote -v
so the command is > git remote set-url --delete <url>


Note:
step:
a. first of all you n eed permissions to add something on the github repo
b. you cannot get creds of the github user not ethical way to get authenticated
c. got to github > settings under profile > tokens classic > generate token and copy
d. now go to the local folder
e. run 1st command i.e git remote set-url --add origin https://<token>@<url that you got from running git remote -v>
f. 2nd command i.e git push origin main

Now your data is synced from local to the github repo

Difference between clone and Fork:

Clone: CLoning will clone the repository but whatever changes you made will affect original project 
Fork: Fork will copy the repository and make changes to the forked repository, this will not change anything on the original repository

				GITHUB ADVANCED

Sync local repo with github [the steps is also for if the repo and folder name is smae then follow 7th step without clone]
-- change the branch to dev
-- git remote -v
-- got to github and create a new repo
-- copy the http url
-- got to settings> developer settings> personal tokens> token(classic)> generate new token  (classic)> check box repo
-- go to local > run command > git remote add origin https://<token>@<url from github>
-- Run git remote -v
-- git checkout master
-- git push origin master
the changes made in local will reflect on remote/github repo

II] Revert
revert isused if you bimistakely created a file which has a bug so instead of deleting the entire file you can revert the last commit 

> git revert <commit id>
then ctrl+X
 so revert creates a new commit on whatever commit you want to revert back and maintain a version history

III] Reset
Reset will not create a new commit and not maintain a version history after you reset a particular commit

reset hard, soft, mied

NOTE: NEVER DO "git add . " this will stage all the files in the repo/folder

> git reset <commit id of the previous commit>

Once you run the above command the file will be untracked

To see the file should not be tracked in the log simply run 
> vim .gitignore
enter the file name to it and save

when you run git status you will see the message that all file are committed

> git diff
will show the changes made

IV] Merge:

steps:
change to main/master branch
-- git merge dev
-- ctrl+X
-- ls
-- git push origin main/master
-- git checkout dev
-- git push origin dev

you will see the main/master has all the files as that of dev also in github you will see there are 2 branches main/master and dev

Now go to github and merge using gui 

Steps:
> got to pullrequest
> add new pullrequest
> base: main/master compare: dev
> add reviwer mail id and once he approves you can click on merge pullrequest

V] Squash
>git merge dev --squash - to not get the long history but you will see the files only

VI] Rebase:
rebase will help maintain complete history in linear fashion without missing any comment whereas in merge you will see HEAD
note: once you do rebase you cannot come out of it 

> git pull origin master --rebase

VII] stash

stash is used for saving the file temporarily withou commiting and resume back to where you stopped in working directory

>git stash- save the file half way without commting 
>git stash pop- resume back to where you stopped

